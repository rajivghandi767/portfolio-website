# Use official Node.js image to build the frontend
FROM node:23-alpine AS build

# Set up non-root user and working directory in a single step
RUN addgroup -S frontend_group && adduser -S frontend -G frontend_group && \
    mkdir -p /home/frontend/react && chown -R frontend:frontend_group /home/frontend/react
WORKDIR /home/frontend/react

# Switch to the non-root user
USER frontend

# Install dependencies, copy project files, build, and clean unnecessary files in one layer
COPY --chown=frontend:frontend_group package*.json ./
RUN npm ci npm@latest && npm ci && rm -rf /home/frontend/react/node_modules
COPY --chown=frontend:frontend_group . .
RUN npm run build && rm -rf /home/frontend/react/*

# # Set the working directory inside the container
# WORKDIR /frontend

# # Copy package.json and package-lock.json (if available)
# COPY package.json package-lock.json ./

# # Install dependencies
# RUN npm install -g npm@latest && npm install

# # Copy the rest of the app's source code
# COPY . .

# # Build the app for production
# RUN npm run build

# Use Nginx to serve the built static files
FROM nginx:alpine AS production

# Copy built files from the build stage to the Nginx HTML directory
# COPY --from=build /frontend/dist /usr/share/nginx/html
COPY --from=build /home/frontend/react/dist /usr/share/nginx/html

# Expose port 80 to make the container accessible
EXPOSE 80

# Start Nginx server
CMD ["nginx", "-g", "daemon off;"]
